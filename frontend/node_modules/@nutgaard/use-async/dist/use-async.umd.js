(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
    (factory((global.useAsync = {}),global.react));
}(this, (function (exports,react) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    (function (Status) {
        Status["INIT"] = "INIT";
        Status["PENDING"] = "PENDING";
        Status["OK"] = "OK";
        Status["ERROR"] = "ERROR";
        Status["RELOADING"] = "RELOADING";
    })(exports.Status || (exports.Status = {}));
    function isPending(result) {
        return [exports.Status.INIT, exports.Status.PENDING].includes(result.status);
    }
    function hasData(result) {
        return [exports.Status.OK, exports.Status.RELOADING].includes(result.status);
    }
    function hasError(result) {
        return result.status === exports.Status.ERROR;
    }
    function useAsync(source, lazy, dependencyList, initialState) {
        if (lazy === void 0) { lazy = false; }
        var isCancelled = react.useRef(false);
        var _a = react.useState(0), rerunValue = _a[0], setRerunValue = _a[1];
        var lastRerun = react.useRef(rerunValue);
        var _b = react.useState(initialState || {
            status: lazy ? exports.Status.INIT : exports.Status.PENDING
        }), state = _b[0], setState = _b[1];
        react.useEffect(function () {
            var isRerun = lastRerun.current !== rerunValue;
            lastRerun.current = rerunValue;
            if (!lazy || (isRerun && ![exports.Status.PENDING, exports.Status.RELOADING].includes(state.status))) {
                if (state.status === exports.Status.OK) {
                    setState({ status: exports.Status.RELOADING, data: state.data });
                }
                else {
                    setState({ status: exports.Status.PENDING });
                }
                source(isRerun).then(function (data) {
                    if (!isCancelled.current) {
                        setState({ status: exports.Status.OK, data: data });
                    }
                }, function (error) {
                    console.error(error);
                    if (!isCancelled.current) {
                        setState({ status: exports.Status.ERROR, error: error });
                    }
                });
            }
            // Alle skal være med, men eslint greier ikke å analysere den
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, dependencyList
            ? dependencyList.concat([rerunValue, lazy, isCancelled]) : [source, rerunValue, lazy, isCancelled]);
        react.useEffect(function () {
            return function () {
                isCancelled.current = true;
            };
        }, [isCancelled]);
        var rerun = react.useCallback(function () {
            setRerunValue(function (v) { return v + 1; });
        }, []);
        return react.useMemo(function () { return (__assign({}, state, { rerun: rerun })); }, [state, rerun]);
    }

    exports.isPending = isPending;
    exports.hasData = hasData;
    exports.hasError = hasError;
    exports.default = useAsync;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=use-async.umd.js.map
