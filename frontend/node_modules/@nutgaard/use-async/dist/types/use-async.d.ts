import { DependencyList } from 'react';
export declare enum Status {
    INIT = "INIT",
    PENDING = "PENDING",
    OK = "OK",
    ERROR = "ERROR",
    RELOADING = "RELOADING"
}
export declare type WithoutData = {
    status: Status.INIT | Status.PENDING;
};
export declare type WithData<TYPE> = {
    status: Status.OK | Status.RELOADING;
    data: TYPE;
};
export declare type WithError = {
    status: Status.ERROR;
    error: any;
};
export declare type AsyncData<TYPE> = WithoutData | WithData<TYPE> | WithError;
export declare type AsyncResult<TYPE> = AsyncData<TYPE> & {
    rerun(): void;
};
export declare function isPending(result: AsyncData<any>): result is WithoutData;
export declare function hasData<TYPE>(result: AsyncData<TYPE>): result is WithData<TYPE>;
export declare function hasError(result: AsyncData<any>): result is WithError;
export default function useAsync<TYPE>(source: (isRerun: boolean) => Promise<TYPE>, lazy?: boolean, dependencyList?: DependencyList, initialState?: AsyncData<TYPE>): AsyncResult<TYPE>;
