{"version":3,"file":"use-fetch.umd.js","sources":["../src/fetch-cache.ts","../src/use-fetch.ts"],"sourcesContent":["class FetchCache {\n    private cache: { [key: string]: Promise<Response> } = {};\n    private resolvedCache: { [key: string]: any } = {};\n\n    fetch(key: string, url: string, init?: RequestInit): Promise<Response> {\n        if (this.hasKey(key)) {\n            return this.get(key).then((resp) => resp.clone());\n        }\n\n        const result = fetch(url, init);\n        this.put(key, result);\n\n        result.then(\n            (resp) => {\n                if (!resp.ok) {\n                    this.remove(key);\n                }\n            },\n            () => {\n                this.remove(key);\n            }\n        );\n\n        return result.then((resp) => resp.clone());\n    }\n\n    get(key: string) {\n        return this.cache[key];\n    }\n\n    getResolved(key: string) {\n        return this.resolvedCache[key];\n    }\n\n    putResolved(key: string, value: object) {\n        this.resolvedCache[key] = value;\n    }\n\n    put(key: string, value: Promise<Response>) {\n        this.cache[key] = value;\n    }\n\n    remove(key: string) {\n        delete this.cache[key];\n    }\n\n    clear() {\n        this.cache = {};\n        this.resolvedCache = {};\n    }\n\n    hasKey(key: string) {\n        // tslint:disable-next-line:strict-type-predicates\n        return this.cache[key] !== undefined;\n    }\n\n    hasKeyResolved(key: string) {\n        // tslint:disable-next-line:strict-type-predicates\n        return this.resolvedCache[key] !== undefined;\n    }\n\n    size() {\n        return Object.keys(this.cache).length;\n    }\n}\n\nconst globaleFetchCache = new FetchCache();\n\nexport default globaleFetchCache;\n","import useAsync, { AsyncData, AsyncResult, Status } from '@nutgaard/use-async';\nimport { useCallback, useMemo, useState } from 'react';\nimport cache from './fetch-cache';\n\nexport { default as cache } from './fetch-cache';\nexport * from '@nutgaard/use-async';\n\nexport interface Config {\n    lazy: boolean;\n    cacheKey?: string;\n}\n\nexport type FetchResult<TYPE> = { statusCode: number } & AsyncResult<TYPE>;\n\nexport function createCacheKey(url: string, option?: RequestInit) {\n    const method = (option && option.method) || 'GET';\n    const body = (option && option.body && option.body.toString()) || '';\n    const headers = (option && option.headers && JSON.stringify(option.headers)) || '';\n    return [url, method.toUpperCase(), body, headers].join('||');\n}\n\nfunction handleResponse<TYPE>(\n    response: Promise<Response>,\n    setStatusCode: (status: number) => void,\n    cacheKey: string\n): Promise<TYPE> {\n    return response\n        .then((resp) => {\n            setStatusCode(resp.status);\n            if (!resp.ok) {\n                throw new Error(resp.statusText);\n            }\n            if ([200, 201, 203, 206].includes(resp.status)) {\n                return resp.json();\n            }\n            return;\n        })\n        .then((json) => {\n            cache.putResolved(cacheKey, json);\n            return json;\n        });\n}\n\nexport default function useFetch<TYPE>(\n    url: string,\n    option?: RequestInit,\n    config: Config = {\n        lazy: false,\n        cacheKey: undefined\n    }\n): FetchResult<TYPE> {\n    const [statusCode, setStatusCode] = useState<number>(-1);\n    const defaultCacheKey: string = createCacheKey(url, option);\n    const cacheKey = config.cacheKey || defaultCacheKey;\n    const source = useCallback(\n        (isRerun: boolean) => {\n            setStatusCode(-1);\n            const response = isRerun ? fetch(url, option) : cache.fetch(cacheKey, url, option);\n            if (isRerun) {\n                cache.put(cacheKey, response);\n            }\n            return handleResponse<TYPE>(response, setStatusCode, cacheKey);\n        },\n        [url, option, cacheKey]\n    );\n    const initialConfig: AsyncData<TYPE> | undefined = cache.hasKeyResolved(cacheKey)\n        ? { status: Status.OK, data: cache.getResolved(cacheKey) }\n        : undefined;\n    const asyncResult = useAsync<TYPE>(source, config.lazy, [source], initialConfig);\n    return useMemo(() => {\n        return {\n            ...asyncResult,\n            statusCode\n        };\n    }, [asyncResult, statusCode]);\n}\n"],"names":["cache","useCallback","Status","useAsync","useMemo"],"mappings":"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"}