{"version":3,"file":"use-fetch.es5.js","sources":["../src/fetch-cache.ts","../src/use-fetch.ts"],"sourcesContent":["class FetchCache {\n    private cache: { [key: string]: Promise<Response> } = {};\n    private resolvedCache: { [key: string]: any } = {};\n\n    fetch(key: string, url: string, init?: RequestInit): Promise<Response> {\n        if (this.hasKey(key)) {\n            return this.get(key).then((resp) => resp.clone());\n        }\n\n        const result = fetch(url, init);\n        this.put(key, result);\n\n        result.then(\n            (resp) => {\n                if (!resp.ok) {\n                    this.remove(key);\n                }\n            },\n            () => {\n                this.remove(key);\n            }\n        );\n\n        return result.then((resp) => resp.clone());\n    }\n\n    get(key: string) {\n        return this.cache[key];\n    }\n\n    getResolved(key: string) {\n        return this.resolvedCache[key];\n    }\n\n    putResolved(key: string, value: object) {\n        this.resolvedCache[key] = value;\n    }\n\n    put(key: string, value: Promise<Response>) {\n        this.cache[key] = value;\n    }\n\n    remove(key: string) {\n        delete this.cache[key];\n    }\n\n    clear() {\n        this.cache = {};\n        this.resolvedCache = {};\n    }\n\n    hasKey(key: string) {\n        // tslint:disable-next-line:strict-type-predicates\n        return this.cache[key] !== undefined;\n    }\n\n    hasKeyResolved(key: string) {\n        // tslint:disable-next-line:strict-type-predicates\n        return this.resolvedCache[key] !== undefined;\n    }\n\n    size() {\n        return Object.keys(this.cache).length;\n    }\n}\n\nconst globaleFetchCache = new FetchCache();\n\nexport default globaleFetchCache;\n","import useAsync, { AsyncData, AsyncResult, Status } from '@nutgaard/use-async';\nimport { useCallback, useMemo, useState } from 'react';\nimport cache from './fetch-cache';\n\nexport { default as cache } from './fetch-cache';\nexport * from '@nutgaard/use-async';\n\nexport interface Config {\n    lazy: boolean;\n    cacheKey?: string;\n}\n\nexport type FetchResult<TYPE> = { statusCode: number } & AsyncResult<TYPE>;\n\nexport function createCacheKey(url: string, option?: RequestInit) {\n    const method = (option && option.method) || 'GET';\n    const body = (option && option.body && option.body.toString()) || '';\n    const headers = (option && option.headers && JSON.stringify(option.headers)) || '';\n    return [url, method.toUpperCase(), body, headers].join('||');\n}\n\nfunction handleResponse<TYPE>(\n    response: Promise<Response>,\n    setStatusCode: (status: number) => void,\n    cacheKey: string\n): Promise<TYPE> {\n    return response\n        .then((resp) => {\n            setStatusCode(resp.status);\n            if (!resp.ok) {\n                throw new Error(resp.statusText);\n            }\n            if ([200, 201, 203, 206].includes(resp.status)) {\n                return resp.json();\n            }\n            return;\n        })\n        .then((json) => {\n            cache.putResolved(cacheKey, json);\n            return json;\n        });\n}\n\nexport default function useFetch<TYPE>(\n    url: string,\n    option?: RequestInit,\n    config: Config = {\n        lazy: false,\n        cacheKey: undefined\n    }\n): FetchResult<TYPE> {\n    const [statusCode, setStatusCode] = useState<number>(-1);\n    const defaultCacheKey: string = createCacheKey(url, option);\n    const cacheKey = config.cacheKey || defaultCacheKey;\n    const source = useCallback(\n        (isRerun: boolean) => {\n            setStatusCode(-1);\n            const response = isRerun ? fetch(url, option) : cache.fetch(cacheKey, url, option);\n            if (isRerun) {\n                cache.put(cacheKey, response);\n            }\n            return handleResponse<TYPE>(response, setStatusCode, cacheKey);\n        },\n        [url, option, cacheKey]\n    );\n    const initialConfig: AsyncData<TYPE> | undefined = cache.hasKeyResolved(cacheKey)\n        ? { status: Status.OK, data: cache.getResolved(cacheKey) }\n        : undefined;\n    const asyncResult = useAsync<TYPE>(source, config.lazy, [source], initialConfig);\n    return useMemo(() => {\n        return {\n            ...asyncResult,\n            statusCode\n        };\n    }, [asyncResult, statusCode]);\n}\n"],"names":["cache","useAsync"],"mappings":"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"}