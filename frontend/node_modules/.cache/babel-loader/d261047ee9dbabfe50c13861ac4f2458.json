{"ast":null,"code":"import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar Status;\n\n(function (Status) {\n  Status[\"INIT\"] = \"INIT\";\n  Status[\"PENDING\"] = \"PENDING\";\n  Status[\"OK\"] = \"OK\";\n  Status[\"ERROR\"] = \"ERROR\";\n  Status[\"RELOADING\"] = \"RELOADING\";\n})(Status || (Status = {}));\n\nfunction isPending(result) {\n  return [Status.INIT, Status.PENDING].includes(result.status);\n}\n\nfunction hasData(result) {\n  return [Status.OK, Status.RELOADING].includes(result.status);\n}\n\nfunction hasError(result) {\n  return result.status === Status.ERROR;\n}\n\nfunction useAsync(source, lazy, dependencyList, initialState) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var isCancelled = useRef(false);\n\n  var _a = useState(0),\n      rerunValue = _a[0],\n      setRerunValue = _a[1];\n\n  var lastRerun = useRef(rerunValue);\n\n  var _b = useState(initialState || {\n    status: lazy ? Status.INIT : Status.PENDING\n  }),\n      state = _b[0],\n      setState = _b[1];\n\n  useEffect(function () {\n    var isRerun = lastRerun.current !== rerunValue;\n    lastRerun.current = rerunValue;\n\n    if (!lazy || isRerun && ![Status.PENDING, Status.RELOADING].includes(state.status)) {\n      if (state.status === Status.OK) {\n        setState({\n          status: Status.RELOADING,\n          data: state.data\n        });\n      } else {\n        setState({\n          status: Status.PENDING\n        });\n      }\n\n      source(isRerun).then(function (data) {\n        if (!isCancelled.current) {\n          setState({\n            status: Status.OK,\n            data: data\n          });\n        }\n      }, function (error) {\n        console.error(error);\n\n        if (!isCancelled.current) {\n          setState({\n            status: Status.ERROR,\n            error: error\n          });\n        }\n      });\n    } // Alle skal være med, men eslint greier ikke å analysere den\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, dependencyList ? dependencyList.concat([rerunValue, lazy, isCancelled]) : [source, rerunValue, lazy, isCancelled]);\n  useEffect(function () {\n    return function () {\n      isCancelled.current = true;\n    };\n  }, [isCancelled]);\n  var rerun = useCallback(function () {\n    setRerunValue(function (v) {\n      return v + 1;\n    });\n  }, []);\n  return useMemo(function () {\n    return __assign({}, state, {\n      rerun: rerun\n    });\n  }, [state, rerun]);\n}\n\nexport default useAsync;\nexport { Status, isPending, hasData, hasError };","map":null,"metadata":{},"sourceType":"module"}